"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.query = void 0;
var lib_1 = require("../lib");
var client_js_1 = require("@polywrap/client-js");
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var path_1 = __importDefault(require("path"));
var js_yaml_1 = __importDefault(require("js-yaml"));
var fs_1 = __importDefault(require("fs"));
exports.query = {
    setup: function (program) {
        program
            .command("query")
            .alias("q")
            .description(lib_1.intlMsg.commands_query_description())
            .argument("<recipe>", lib_1.intlMsg.commands_query_options_recipeScript())
            .option("-c, --client-config <" + lib_1.intlMsg.commands_query_options_configPath() + "> ", "" + lib_1.intlMsg.commands_query_options_config())
            .option("-o, --output-file <" + lib_1.intlMsg.commands_query_options_outputFilePath() + ">", "" + lib_1.intlMsg.commands_query_options_outputFile())
            .option("-q, --quiet", "" + lib_1.intlMsg.commands_query_options_quiet())
            .action(function (recipe, options) { return __awaiter(void 0, void 0, void 0, function () {
            var _a, _b, _c;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _a = run;
                        _b = [recipe];
                        _c = [__assign({}, options)];
                        _d = {};
                        return [4 /*yield*/, lib_1.parseClientConfigOption(options.clientConfig, undefined)];
                    case 1: return [4 /*yield*/, _a.apply(void 0, _b.concat([__assign.apply(void 0, _c.concat([(_d.clientConfig = _e.sent(), _d.outputFile = options.outputFile
                                    ? lib_1.parseRecipeOutputFilePathOption(options.outputFile, undefined)
                                    : undefined, _d)]))]))];
                    case 2:
                        _e.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
function run(recipePath, options) {
    return __awaiter(this, void 0, void 0, function () {
        function getParser(path) {
            return path.endsWith(".yaml") || path.endsWith(".yml")
                ? js_yaml_1.default.load
                : JSON.parse;
        }
        var clientConfig, outputFile, quiet, client, recipe, dir, uri, recipeOutput, constants, _loop_1, recipe_1, recipe_1_1, task, e_1_1;
        var e_1, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    clientConfig = options.clientConfig, outputFile = options.outputFile, quiet = options.quiet;
                    client = new client_js_1.PolywrapClient(clientConfig);
                    recipe = getParser(recipePath)(fs_1.default.readFileSync(recipePath).toString());
                    dir = path_1.default.dirname(recipePath);
                    uri = "";
                    recipeOutput = [];
                    constants = {};
                    _loop_1 = function (task) {
                        var query_1, readFailMessage, variables, resolveObjectConstants_1, resolveArrayConstants_1, resolveConstant_1, _a, data, errors, errors_1, errors_1_1, error, outputFileExt;
                        var e_2, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    if (task.wrapper) {
                                        uri = task.wrapper;
                                        recipeOutput.push({ wrapper: task.wrapper });
                                    }
                                    if (task.constants) {
                                        constants = getParser(task.constants)(fs_1.default.readFileSync(path_1.default.join(dir, task.constants)).toString());
                                        recipeOutput.push({ constants: task.constants });
                                    }
                                    if (!task.query) return [3 /*break*/, 2];
                                    query_1 = fs_1.default.readFileSync(path_1.default.join(dir, task.query)).toString();
                                    if (!query_1) {
                                        readFailMessage = lib_1.intlMsg.commands_query_error_readFail({
                                            query: query_1 !== null && query_1 !== void 0 ? query_1 : "undefined",
                                        });
                                        console.error(readFailMessage);
                                        process.exit(1);
                                    }
                                    variables = {};
                                    if (task.variables) {
                                        resolveObjectConstants_1 = function (constants) {
                                            var output = {};
                                            Object.keys(constants).forEach(function (key) {
                                                output[key] = resolveConstant_1(constants[key]);
                                            });
                                            return output;
                                        };
                                        resolveArrayConstants_1 = function (arr) {
                                            return arr.map(function (item) {
                                                return resolveConstant_1(item);
                                            });
                                        };
                                        resolveConstant_1 = function (constant) {
                                            if (typeof constant === "string" && constant[0] === "$") {
                                                return constants[constant.replace("$", "")];
                                            }
                                            else if (Array.isArray(constant)) {
                                                return resolveArrayConstants_1(constant);
                                            }
                                            else if (typeof constant === "object") {
                                                return resolveObjectConstants_1(constant);
                                            }
                                            else {
                                                return constant;
                                            }
                                        };
                                        variables = resolveObjectConstants_1(task.variables);
                                    }
                                    if (!uri) {
                                        throw Error(lib_1.intlMsg.commands_query_error_noWrapper());
                                    }
                                    if (!quiet) {
                                        console.log("-----------------------------------");
                                        console.log(query_1);
                                        console.log(JSON.stringify(variables, null, 2));
                                        console.log("-----------------------------------");
                                    }
                                    return [4 /*yield*/, client.query({
                                            uri: uri,
                                            query: graphql_tag_1.default(query_1),
                                            variables: variables,
                                        })];
                                case 1:
                                    _a = _c.sent(), data = _a.data, errors = _a.errors;
                                    if (outputFile) {
                                        recipeOutput.push({
                                            query: task.query,
                                            variables: task.variables,
                                            output: {
                                                data: data,
                                                errors: errors,
                                            },
                                        });
                                    }
                                    if (!quiet && data && data !== {}) {
                                        console.log("-----------------------------------");
                                        console.log(JSON.stringify(data, null, 2));
                                        console.log("-----------------------------------");
                                    }
                                    if (!quiet && errors) {
                                        try {
                                            for (errors_1 = (e_2 = void 0, __values(errors)), errors_1_1 = errors_1.next(); !errors_1_1.done; errors_1_1 = errors_1.next()) {
                                                error = errors_1_1.value;
                                                console.log("-----------------------------------");
                                                console.log(error.message);
                                                console.log(error.stack || "");
                                                console.log("-----------------------------------");
                                            }
                                        }
                                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                        finally {
                                            try {
                                                if (errors_1_1 && !errors_1_1.done && (_b = errors_1.return)) _b.call(errors_1);
                                            }
                                            finally { if (e_2) throw e_2.error; }
                                        }
                                        process.exitCode = 1;
                                    }
                                    _c.label = 2;
                                case 2:
                                    if (outputFile) {
                                        outputFileExt = path_1.default.extname(outputFile).substring(1);
                                        if (!outputFileExt)
                                            throw new Error("Require output file extention");
                                        switch (outputFileExt) {
                                            case "yaml":
                                            case "yml":
                                                fs_1.default.writeFileSync(outputFile, js_yaml_1.default.dump(recipeOutput));
                                                break;
                                            case "json":
                                                fs_1.default.writeFileSync(outputFile, JSON.stringify(recipeOutput));
                                                break;
                                            default:
                                                throw new Error("Unsupported outputFile extention: " + outputFileExt);
                                        }
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 6, 7, 8]);
                    recipe_1 = __values(recipe), recipe_1_1 = recipe_1.next();
                    _b.label = 2;
                case 2:
                    if (!!recipe_1_1.done) return [3 /*break*/, 5];
                    task = recipe_1_1.value;
                    return [5 /*yield**/, _loop_1(task)];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4:
                    recipe_1_1 = recipe_1.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _b.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (recipe_1_1 && !recipe_1_1.done && (_a = recipe_1.return)) _a.call(recipe_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=query.js.map