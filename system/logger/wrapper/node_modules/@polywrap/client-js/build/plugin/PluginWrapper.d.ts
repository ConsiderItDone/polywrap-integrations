import { Wrapper, Client, GetManifestOptions, InvokeOptions, InvokeResult, PluginPackage, Uri, AnyManifestArtifact, ManifestArtifactType, GetFileOptions, Env } from "@polywrap/core-js";
export declare class PluginWrapper extends Wrapper {
    private _uri;
    private _plugin;
    private _clientEnv?;
    private _instance;
    private _sanitizedEnv;
    constructor(_uri: Uri, _plugin: PluginPackage, _clientEnv?: Env<Uri> | undefined);
    getSchema(_client: Client): Promise<string>;
    getManifest<T extends ManifestArtifactType>(_options: GetManifestOptions<T>, _client: Client): Promise<AnyManifestArtifact<T>>;
    getFile(_options: GetFileOptions, _client: Client): Promise<ArrayBuffer | string>;
    invoke<TData = unknown>(options: InvokeOptions<Uri>, client: Client): Promise<InvokeResult<TData>>;
    private _getInstance;
    private _sanitizeAndLoadEnv;
    private _getClientEnv;
}
