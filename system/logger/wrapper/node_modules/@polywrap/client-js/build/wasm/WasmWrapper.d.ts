import { InvokeOptions, InvokeResult, Wrapper, PolywrapManifest, Uri, Client, GetManifestOptions, AnyManifestArtifact, ManifestArtifactType, Env, GetFileOptions } from "@polywrap/core-js";
export interface State {
    method: string;
    args: ArrayBuffer;
    invoke: {
        result?: ArrayBuffer;
        error?: string;
    };
    subinvoke: {
        result?: ArrayBuffer;
        error?: string;
        args: unknown[];
    };
    subinvokeImplementation: {
        result?: ArrayBuffer;
        error?: string;
        args: unknown[];
    };
    invokeResult: InvokeResult;
    getImplementationsResult?: ArrayBuffer;
    sanitizeEnv: {
        args?: ArrayBuffer;
        result?: ArrayBuffer;
    };
    env?: ArrayBuffer;
}
export declare class WasmWrapper extends Wrapper {
    private _uri;
    private _manifest;
    private _uriResolver;
    private _clientEnv?;
    static requiredExports: readonly string[];
    private _schema?;
    private _wasm;
    private _sanitizedEnv;
    constructor(_uri: Uri, _manifest: PolywrapManifest, _uriResolver: string, _clientEnv?: Env<Uri> | undefined);
    getManifest<TManifestArtifact extends ManifestArtifactType>(options: GetManifestOptions<TManifestArtifact>, client: Client): Promise<AnyManifestArtifact<TManifestArtifact>>;
    getFile(options: GetFileOptions, client: Client): Promise<ArrayBuffer | string>;
    invoke(options: InvokeOptions<Uri>, client: Client): Promise<InvokeResult<unknown | ArrayBuffer>>;
    getSchema(client: Client): Promise<string>;
    private _processInvokeResult;
    private _sanitizeAndLoadEnv;
    private _getClientEnv;
    private _getWasmModule;
}
