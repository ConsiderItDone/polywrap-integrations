"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultIpfsProviders = exports.getDefaultClientConfig = void 0;
var _1 = require(".");
var PluginWrapper_1 = require("./plugin/PluginWrapper");
var core_js_1 = require("@polywrap/core-js");
var ipfs_plugin_js_1 = require("@polywrap/ipfs-plugin-js");
var ethereum_plugin_js_1 = require("@polywrap/ethereum-plugin-js");
var ens_plugin_js_1 = require("@polywrap/ens-plugin-js");
var graph_node_plugin_js_1 = require("@polywrap/graph-node-plugin-js");
var http_plugin_js_1 = require("@polywrap/http-plugin-js");
var fs_plugin_js_1 = require("@polywrap/fs-plugin-js");
var uts46_plugin_js_1 = require("@polywrap/uts46-plugin-js");
var sha3_plugin_js_1 = require("@polywrap/sha3-plugin-js");
var logger_plugin_js_1 = require("@polywrap/logger-plugin-js");
var tracing_js_1 = require("@polywrap/tracing-js");
exports.getDefaultClientConfig = tracing_js_1.Tracer.traceFunc("client-js: getDefaultClientConfig", function () {
    return {
        envs: [],
        redirects: [],
        plugins: [
            // IPFS is required for downloading Polywrap packages
            {
                uri: new core_js_1.Uri("wrap://ens/ipfs.polywrap.eth"),
                plugin: ipfs_plugin_js_1.ipfsPlugin({
                    provider: exports.defaultIpfsProviders[0],
                    fallbackProviders: exports.defaultIpfsProviders.slice(1),
                }),
            },
            // ENS is required for resolving domain to IPFS hashes
            {
                uri: new core_js_1.Uri("wrap://ens/ens.polywrap.eth"),
                plugin: ens_plugin_js_1.ensPlugin({}),
            },
            {
                uri: new core_js_1.Uri("wrap://ens/ethereum.polywrap.eth"),
                plugin: ethereum_plugin_js_1.ethereumPlugin({
                    networks: {
                        mainnet: {
                            provider: "https://mainnet.infura.io/v3/b00b2c2cc09c487685e9fb061256d6a6",
                        },
                    },
                }),
            },
            {
                uri: new core_js_1.Uri("wrap://ens/http.polywrap.eth"),
                plugin: http_plugin_js_1.httpPlugin({}),
            },
            {
                uri: new core_js_1.Uri("wrap://ens/js-logger.polywrap.eth"),
                plugin: logger_plugin_js_1.loggerPlugin({}),
            },
            {
                uri: new core_js_1.Uri("wrap://ens/uts46.polywrap.eth"),
                plugin: uts46_plugin_js_1.uts46Plugin({}),
            },
            {
                uri: new core_js_1.Uri("wrap://ens/sha3.polywrap.eth"),
                plugin: sha3_plugin_js_1.sha3Plugin({}),
            },
            {
                uri: new core_js_1.Uri("wrap://ens/graph-node.polywrap.eth"),
                plugin: graph_node_plugin_js_1.graphNodePlugin({
                    provider: "https://api.thegraph.com",
                }),
            },
            {
                uri: new core_js_1.Uri("wrap://ens/fs.polywrap.eth"),
                plugin: fs_plugin_js_1.filesystemPlugin({}),
            },
        ],
        interfaces: [
            {
                interface: core_js_1.coreInterfaceUris.uriResolver,
                implementations: [
                    new core_js_1.Uri("wrap://ens/ipfs.polywrap.eth"),
                    new core_js_1.Uri("wrap://ens/ens.polywrap.eth"),
                    new core_js_1.Uri("wrap://ens/fs.polywrap.eth"),
                ],
            },
            {
                interface: core_js_1.coreInterfaceUris.logger,
                implementations: [new core_js_1.Uri("wrap://ens/js-logger.polywrap.eth")],
            },
        ],
        uriResolvers: [
            new core_js_1.RedirectsResolver(),
            new core_js_1.CacheResolver(),
            new core_js_1.PluginResolver(function (uri, plugin, environment) { return new PluginWrapper_1.PluginWrapper(uri, plugin, environment); }),
            new core_js_1.ExtendableUriResolver(function (uri, manifest, uriResolver, environment) {
                return new _1.WasmWrapper(uri, manifest, uriResolver, environment);
            }),
        ],
    };
});
exports.defaultIpfsProviders = [
    "https://ipfs.wrappers.io",
    "https://ipfs.io",
];
//# sourceMappingURL=default-client-config.js.map