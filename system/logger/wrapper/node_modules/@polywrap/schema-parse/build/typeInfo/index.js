"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.combineTypeInfo = exports.createTypeInfo = void 0;
var definitions_1 = require("./definitions");
__exportStar(require("./definitions"), exports);
__exportStar(require("./scalar"), exports);
__exportStar(require("./module"), exports);
__exportStar(require("./env"), exports);
__exportStar(require("./map"), exports);
function createTypeInfo() {
    return {
        objectTypes: [],
        enumTypes: [],
        interfaceTypes: [],
        importedObjectTypes: [],
        importedModuleTypes: [],
        importedEnumTypes: [],
        envType: definitions_1.createEnvDefinition({}),
    };
}
exports.createTypeInfo = createTypeInfo;
function combineTypeInfo(typeInfos) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g;
    var combined = {
        objectTypes: [],
        moduleType: definitions_1.createModuleDefinition({}),
        enumTypes: [],
        interfaceTypes: [],
        importedObjectTypes: [],
        importedModuleTypes: [],
        importedEnumTypes: [],
        envType: definitions_1.createEnvDefinition({}),
    };
    var compareImportedType = function (a, b) {
        return a.uri === b.uri && a.nativeType === b.nativeType;
    };
    try {
        for (var typeInfos_1 = __values(typeInfos), typeInfos_1_1 = typeInfos_1.next(); !typeInfos_1_1.done; typeInfos_1_1 = typeInfos_1.next()) {
            var typeInfo = typeInfos_1_1.value;
            try {
                for (var _h = (e_2 = void 0, __values(typeInfo.enumTypes)), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var enumType = _j.value;
                    tryInsert(combined.enumTypes, enumType);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                }
                finally { if (e_2) throw e_2.error; }
            }
            try {
                for (var _k = (e_3 = void 0, __values(typeInfo.objectTypes)), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var objectType = _l.value;
                    tryInsert(combined.objectTypes, objectType);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
                }
                finally { if (e_3) throw e_3.error; }
            }
            combined.moduleType = typeInfo.moduleType;
            try {
                for (var _m = (e_4 = void 0, __values(typeInfo.interfaceTypes)), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var interfaceType = _o.value;
                    tryInsert(combined.interfaceTypes, interfaceType, compareImportedType, function (a, b) {
                        var e_8, _a;
                        var combinedCapabilities = __assign(__assign({}, a.capabilities), b.capabilities);
                        var combinedCapabilityTypes = Object.keys(combinedCapabilities);
                        try {
                            for (var combinedCapabilityTypes_1 = (e_8 = void 0, __values(combinedCapabilityTypes)), combinedCapabilityTypes_1_1 = combinedCapabilityTypes_1.next(); !combinedCapabilityTypes_1_1.done; combinedCapabilityTypes_1_1 = combinedCapabilityTypes_1.next()) {
                                var capability = combinedCapabilityTypes_1_1.value;
                                if (b.capabilities[capability] && a.capabilities[capability]) {
                                    combinedCapabilities[capability] = {
                                        enabled: true,
                                    };
                                }
                                else if (a.capabilities[capability]) {
                                    combinedCapabilities[capability] = a.capabilities[capability];
                                }
                                else if (b.capabilities[capability]) {
                                    combinedCapabilities[capability] = b.capabilities[capability];
                                }
                            }
                        }
                        catch (e_8_1) { e_8 = { error: e_8_1 }; }
                        finally {
                            try {
                                if (combinedCapabilityTypes_1_1 && !combinedCapabilityTypes_1_1.done && (_a = combinedCapabilityTypes_1.return)) _a.call(combinedCapabilityTypes_1);
                            }
                            finally { if (e_8) throw e_8.error; }
                        }
                        return __assign(__assign({}, a), { capabilities: combinedCapabilities });
                    });
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
                }
                finally { if (e_4) throw e_4.error; }
            }
            try {
                for (var _p = (e_5 = void 0, __values(typeInfo.importedObjectTypes)), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var importedObjectType = _q.value;
                    tryInsert(combined.importedObjectTypes, importedObjectType, compareImportedType);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
                }
                finally { if (e_5) throw e_5.error; }
            }
            try {
                for (var _r = (e_6 = void 0, __values(typeInfo.importedModuleTypes)), _s = _r.next(); !_s.done; _s = _r.next()) {
                    var importedModuleType = _s.value;
                    tryInsert(combined.importedModuleTypes, importedModuleType, compareImportedType, function (a, b) {
                        return __assign(__assign({}, a), { isInterface: a.isInterface || b.isInterface });
                    });
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_s && !_s.done && (_f = _r.return)) _f.call(_r);
                }
                finally { if (e_6) throw e_6.error; }
            }
            try {
                for (var _t = (e_7 = void 0, __values(typeInfo.importedEnumTypes)), _u = _t.next(); !_u.done; _u = _t.next()) {
                    var importedEnumType = _u.value;
                    tryInsert(combined.importedEnumTypes, importedEnumType);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_u && !_u.done && (_g = _t.return)) _g.call(_t);
                }
                finally { if (e_7) throw e_7.error; }
            }
            if (typeInfo.envType.client) {
                combined.envType.client = typeInfo.envType.client;
            }
            if (typeInfo.envType.sanitized) {
                combined.envType.sanitized = typeInfo.envType.sanitized;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (typeInfos_1_1 && !typeInfos_1_1.done && (_a = typeInfos_1.return)) _a.call(typeInfos_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return combined;
}
exports.combineTypeInfo = combineTypeInfo;
var tryInsert = function (dest, value, compare, join) {
    if (compare === void 0) { compare = function (a, b) {
        return a.type === b.type;
    }; }
    var index = dest.findIndex(function (item) {
        return compare(item, value);
    });
    if (index > -1) {
        if (join) {
            dest[index] = join(dest[index], value);
            return;
        }
        var destType = JSON.stringify(dest[index]);
        var valueType = JSON.stringify(value);
        if (destType !== valueType) {
            throw Error("combineTypeInfo found two types by the same type that are not equivalent.\n" +
                ("Type: \"" + value.type + "\"\nObject A: " + destType + "\nObject B: " + valueType));
        }
    }
    else {
        dest.push(value);
    }
};
//# sourceMappingURL=index.js.map