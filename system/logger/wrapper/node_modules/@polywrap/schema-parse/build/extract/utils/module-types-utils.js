"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractInputValueDefinition = exports.extractListType = exports.extractNamedType = void 0;
var typeInfo_1 = require("../../typeInfo");
var property_utils_1 = require("./property-utils");
var object_types_utils_1 = require("./object-types-utils");
function extractNamedType(node, state) {
    var argument = state.currentArgument;
    var method = state.currentMethod;
    if (method && argument) {
        if (!argument.name) {
            throw Error("extractNamedType: Invalid state. Uninitialized currentArgument, name not found.\n" +
                ("Argument: " + JSON.stringify(argument, null, 2) + "\nState: " + JSON.stringify(state, null, 2)));
        }
        // Argument value
        property_utils_1.setPropertyType(argument, argument.name, {
            type: node.name.value,
            required: state.nonNullType,
        });
        state.nonNullType = false;
    }
    else if (method) {
        // Return value
        if (!state.currentReturn) {
            state.currentReturn = method.return;
        }
        if (!method.name) {
            throw Error("extractNamedType: Invalid state. Uninitialized currentMethod, name not found.\n" +
                ("Method: " + JSON.stringify(method, null, 2) + "\nState: " + JSON.stringify(state, null, 2)));
        }
        property_utils_1.setPropertyType(state.currentReturn, method.name, {
            type: node.name.value,
            required: state.nonNullType,
        });
        state.nonNullType = false;
    }
}
exports.extractNamedType = extractNamedType;
function extractListType(state) {
    var argument = state.currentArgument;
    var method = state.currentMethod;
    if (method && argument) {
        // Argument value
        argument.array = typeInfo_1.createArrayDefinition({
            name: argument.name,
            type: "N/A",
            required: state.nonNullType,
        });
        state.currentArgument = argument.array;
        state.nonNullType = false;
    }
    else if (method) {
        // Return value
        if (!method.return) {
            method.return = typeInfo_1.createPropertyDefinition({
                type: "N/A",
                name: method.name,
            });
            state.currentReturn = method.return;
        }
        else if (!state.currentReturn) {
            state.currentReturn = method.return;
        }
        state.currentReturn.array = typeInfo_1.createArrayDefinition({
            type: "N/A",
            name: method.name,
            required: state.nonNullType,
        });
        state.currentReturn = state.currentReturn.array;
        state.nonNullType = false;
    }
}
exports.extractListType = extractListType;
function extractInputValueDefinition(node, state) {
    var _a;
    var method = state.currentMethod;
    if (!method) {
        return;
    }
    var name = node.name.value;
    var _b = object_types_utils_1.extractAnnotateDirective(node, name), type = _b.type, def = _b.def;
    var argument = typeInfo_1.createPropertyDefinition({
        type: type ? type : "N/A",
        name: name,
        map: def ? def : undefined,
        comment: (_a = node.description) === null || _a === void 0 ? void 0 : _a.value,
        required: def && def.required ? true : false,
    });
    method.arguments.push(argument);
    state.currentArgument = argument;
}
exports.extractInputValueDefinition = extractInputValueDefinition;
//# sourceMappingURL=module-types-utils.js.map