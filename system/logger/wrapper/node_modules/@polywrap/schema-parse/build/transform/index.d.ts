import { TypeInfo, GenericDefinition, ObjectDefinition, AnyDefinition, ScalarDefinition, PropertyDefinition, ArrayDefinition, MethodDefinition, ModuleDefinition, ImportedModuleDefinition, ImportedObjectDefinition, EnumDefinition, ImportedEnumDefinition, InterfaceImplementedDefinition, EnumRef, ObjectRef, InterfaceDefinition, EnvDefinition, WithKind, MapDefinition } from "../typeInfo";
export * from "./finalizePropertyDef";
export * from "./extendType";
export * from "./addFirstLast";
export * from "./interfaceUris";
export * from "./methodParentPointers";
export * from "./toGraphQLType";
export * from "./moduleCapabilities";
export * from "./hasImports";
export * from "./addAnnotations";
export interface TypeInfoTransforms {
    enter?: TypeInfoTransformer;
    leave?: TypeInfoTransformer;
}
export interface TypeInfoTransformer {
    TypeInfo?: (typeInfo: TypeInfo) => TypeInfo;
    GenericDefinition?: (def: GenericDefinition) => GenericDefinition;
    ObjectDefinition?: (def: ObjectDefinition) => ObjectDefinition;
    ObjectRef?: (def: ObjectRef) => ObjectRef;
    AnyDefinition?: (def: AnyDefinition) => AnyDefinition;
    ScalarDefinition?: (def: ScalarDefinition) => ScalarDefinition;
    EnumDefinition?: (def: EnumDefinition) => EnumDefinition;
    EnumRef?: (def: EnumRef) => EnumRef;
    PropertyDefinition?: (def: PropertyDefinition) => PropertyDefinition;
    ArrayDefinition?: (def: ArrayDefinition) => ArrayDefinition;
    MethodDefinition?: (def: MethodDefinition) => MethodDefinition;
    ModuleDefinition?: (def: ModuleDefinition) => ModuleDefinition;
    InterfaceDefinition?: (def: InterfaceDefinition) => InterfaceDefinition;
    ImportedEnumDefinition?: (def: ImportedEnumDefinition) => ImportedEnumDefinition;
    ImportedModuleDefinition?: (def: ImportedModuleDefinition) => ImportedModuleDefinition;
    ImportedObjectDefinition?: (def: ImportedObjectDefinition) => ImportedObjectDefinition;
    InterfaceImplementedDefinition?: (def: InterfaceImplementedDefinition) => InterfaceImplementedDefinition;
    EnvDefinition?: (def: EnvDefinition) => EnvDefinition;
    MapDefinition?: (def: MapDefinition) => MapDefinition;
}
export declare function transformTypeInfo(typeInfo: TypeInfo, transforms: TypeInfoTransforms): TypeInfo;
export declare function visitObjectDefinition(def: ObjectDefinition, transforms: TypeInfoTransforms): ObjectDefinition;
export declare function visitObjectRef(def: ObjectRef, transforms: TypeInfoTransforms): ObjectRef;
export declare function visitInterfaceImplementedDefinition(def: InterfaceImplementedDefinition, transforms: TypeInfoTransforms): InterfaceImplementedDefinition;
export declare function visitAnyDefinition(def: AnyDefinition, transforms: TypeInfoTransforms): AnyDefinition;
export declare function visitScalarDefinition(def: ScalarDefinition, transforms: TypeInfoTransforms): ScalarDefinition;
export declare function visitEnumDefinition(def: EnumDefinition, transforms: TypeInfoTransforms): EnumDefinition;
export declare function visitEnumRef(def: EnumRef, transforms: TypeInfoTransforms): EnumRef;
export declare function visitArrayDefinition(def: ArrayDefinition, transforms: TypeInfoTransforms): ArrayDefinition;
export declare function visitPropertyDefinition(def: PropertyDefinition, transforms: TypeInfoTransforms): PropertyDefinition;
export declare function visitMethodDefinition(def: MethodDefinition, transforms: TypeInfoTransforms): MethodDefinition;
export declare function visitModuleDefinition(def: ModuleDefinition, transforms: TypeInfoTransforms): ModuleDefinition;
export declare function visitInterfaceDefinition(def: InterfaceDefinition, transforms: TypeInfoTransforms): InterfaceDefinition;
export declare function visitImportedModuleDefinition(def: ImportedModuleDefinition, transforms: TypeInfoTransforms): ImportedModuleDefinition;
export declare function visitImportedObjectDefinition(def: ImportedObjectDefinition, transforms: TypeInfoTransforms): ImportedObjectDefinition;
export declare function visitImportedEnumDefinition(def: ImportedEnumDefinition, transforms: TypeInfoTransforms): ImportedEnumDefinition;
export declare function visitEnvDefinition(def: EnvDefinition, transforms: TypeInfoTransforms): EnvDefinition;
export declare function visitMapDefinition(def: MapDefinition, transforms: TypeInfoTransforms): MapDefinition;
export declare function transformType<TDefinition extends WithKind>(type: TDefinition, transform?: TypeInfoTransformer): TDefinition;
