"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkDuplicateEnvProperties = exports.validateClientEnvironment = exports.validateEnv = void 0;
var schema_parse_1 = require("@polywrap/schema-parse");
function validateEnv(info) {
    if (info.envType.client) {
        validateClientEnvironment(info, info.envType.client, info.envType.sanitized);
    }
}
exports.validateEnv = validateEnv;
function validateClientEnvironment(info, client, sanitized) {
    if (!sanitized) {
        throw new Error("Client environment type '" + client.type + "' should have matching sanitized environment type");
    }
    if (!info.moduleType) {
        throw new Error("validateClientEnvironment: Cannot find the specified module type by name '" + schema_parse_1.MODULE_NAME + "' while trying to validate '" + client.type + "'");
    }
    var sanitizeEnvMethod = info.moduleType.methods.find(function (method) { return method.name === "sanitizeEnv"; });
    if (!sanitizeEnvMethod) {
        throw new Error("Must have 'sanitizeEnv' method inside module methods when using '" + client.type + "'");
    }
    if (sanitizeEnvMethod.arguments.length === 0 ||
        sanitizeEnvMethod.arguments.length > 1 ||
        sanitizeEnvMethod.arguments[0].name !== "env" ||
        sanitizeEnvMethod.arguments[0].type !== client.type ||
        sanitizeEnvMethod.arguments[0].required === false) {
        throw new Error("'sanitizeEnv' module method should have single argument 'env: " + client.type + "'");
    }
    if (!sanitizeEnvMethod.return ||
        sanitizeEnvMethod.return.type !== sanitized.type ||
        sanitizeEnvMethod.return.required === false) {
        throw new Error("'sanitizeEnv' module method should have required return type '" + sanitized.type + "'");
    }
}
exports.validateClientEnvironment = validateClientEnvironment;
function checkDuplicateEnvProperties(envType, envProperties) {
    var e_1, _a;
    var envPropertiesSet = new Set(envProperties.map(function (envProperty) { return envProperty.name; }));
    try {
        for (var _b = __values(envType.properties), _c = _b.next(); !_c.done; _c = _b.next()) {
            var specificProperty = _c.value;
            if (envPropertiesSet.has(specificProperty.name)) {
                throw new Error("Type '" + envType.type + "' contains duplicate property '" + specificProperty.name + "' of type 'Env'");
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
exports.checkDuplicateEnvProperties = checkDuplicateEnvProperties;
//# sourceMappingURL=env.js.map