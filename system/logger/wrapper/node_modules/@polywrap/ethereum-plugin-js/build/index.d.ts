import { Client, Module, Input_callContractView, Input_callContractStatic, Input_getBalance, Input_encodeParams, Input_encodeFunction, Input_solidityPack, Input_solidityKeccak256, Input_soliditySha256, Input_getSignerAddress, Input_getSignerBalance, Input_getSignerTransactionCount, Input_getGasPrice, Input_estimateTransactionGas, Input_estimateContractCallGas, Input_checkAddress, Input_toWei, Input_toEth, Input_waitForEvent, Input_awaitTransaction, Input_getNetwork, Input_callContractMethod, Input_callContractMethodAndWait, Input_deployContract, Input_sendRPC, Input_sendTransaction, Input_sendTransactionAndWait, Input_signMessage, TxResponse, BigInt, StaticTxResult, EventNotification, TxReceipt, Network } from "./wrap";
import { ConnectionConfigs } from "./Connection";
import { PluginFactory } from "@polywrap/core-js";
export interface EthereumPluginConfig extends Record<string, unknown> {
    networks: ConnectionConfigs;
    defaultNetwork?: string;
}
export declare class EthereumPlugin extends Module<EthereumPluginConfig> {
    private _connections;
    private _defaultNetwork;
    constructor(config: EthereumPluginConfig);
    callContractView(input: Input_callContractView, _client: Client): Promise<string>;
    callContractStatic(input: Input_callContractStatic, _client: Client): Promise<StaticTxResult>;
    getBalance(input: Input_getBalance, _client: Client): Promise<BigInt>;
    encodeParams(input: Input_encodeParams, _client: Client): Promise<string>;
    encodeFunction(input: Input_encodeFunction, _client: Client): Promise<string>;
    solidityPack(input: Input_solidityPack, _client: Client): Promise<string>;
    solidityKeccak256(input: Input_solidityKeccak256, _client: Client): Promise<string>;
    soliditySha256(input: Input_soliditySha256, _client: Client): Promise<string>;
    getSignerAddress(input: Input_getSignerAddress, _client: Client): Promise<string>;
    getSignerBalance(input: Input_getSignerBalance, _client: Client): Promise<string>;
    getSignerTransactionCount(input: Input_getSignerTransactionCount, _client: Client): Promise<string>;
    getGasPrice(input: Input_getGasPrice, _client: Client): Promise<string>;
    estimateTransactionGas(input: Input_estimateTransactionGas, _client: Client): Promise<string>;
    estimateContractCallGas(input: Input_estimateContractCallGas, _client: Client): Promise<string>;
    checkAddress(input: Input_checkAddress, _client: Client): Promise<boolean>;
    toWei(input: Input_toWei, _client: Client): Promise<string>;
    toEth(input: Input_toEth, _client: Client): Promise<string>;
    waitForEvent(input: Input_waitForEvent, _client: Client): Promise<EventNotification>;
    awaitTransaction(input: Input_awaitTransaction, _client: Client): Promise<TxReceipt>;
    getNetwork(input: Input_getNetwork, _client: Client): Promise<Network>;
    callContractMethod(input: Input_callContractMethod, _client: Client): Promise<TxResponse>;
    callContractMethodAndWait(input: Input_callContractMethodAndWait, _client: Client): Promise<TxReceipt>;
    sendTransaction(input: Input_sendTransaction, _client: Client): Promise<TxResponse>;
    sendTransactionAndWait(input: Input_sendTransactionAndWait, _client: Client): Promise<TxReceipt>;
    deployContract(input: Input_deployContract, _client: Client): Promise<string>;
    signMessage(input: Input_signMessage, _client: Client): Promise<string>;
    sendRPC(input: Input_sendRPC, _client: Client): Promise<string>;
    private _callContractMethod;
    private _getConnection;
}
export declare const ethereumPlugin: PluginFactory<EthereumPluginConfig>;
export declare const plugin: PluginFactory<EthereumPluginConfig>;
