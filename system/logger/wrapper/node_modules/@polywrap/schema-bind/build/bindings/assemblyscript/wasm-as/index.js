"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateBinding = void 0;
var Functions = __importStar(require("./functions"));
var templates_1 = require("../../utils/templates");
var schema_parse_1 = require("@polywrap/schema-parse");
var os_js_1 = require("@polywrap/os-js");
var path_1 = __importDefault(require("path"));
var templatesDir = os_js_1.readDirectorySync(path_1.default.join(__dirname, "./templates"));
var subTemplates = templates_1.loadSubTemplates(templatesDir.entries);
var templatePath = function (subpath) {
    return path_1.default.join(__dirname, "./templates", subpath);
};
exports.generateBinding = function (options) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, _g;
    var result = {
        output: {
            entries: [],
        },
        outputDirAbs: options.outputDirAbs,
    };
    var output = result.output;
    var typeInfo = applyTransforms(options.typeInfo);
    try {
        // Generate object type folders
        for (var _h = __values(typeInfo.objectTypes), _j = _h.next(); !_j.done; _j = _h.next()) {
            var objectType = _j.value;
            output.entries.push({
                type: "Directory",
                name: objectType.type,
                data: templates_1.renderTemplates(templatePath("object-type"), objectType, subTemplates),
            });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
        }
        finally { if (e_1) throw e_1.error; }
    }
    // Generate imported folder
    var importEntries = [];
    try {
        // Generate imported module type folders
        for (var _k = __values(typeInfo.importedModuleTypes), _l = _k.next(); !_l.done; _l = _k.next()) {
            var importedModuleType = _l.value;
            importEntries.push({
                type: "Directory",
                name: importedModuleType.type,
                data: templates_1.renderTemplates(templatePath("imported/module-type"), importedModuleType, subTemplates),
            });
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_l && !_l.done && (_b = _k.return)) _b.call(_k);
        }
        finally { if (e_2) throw e_2.error; }
    }
    try {
        // Generate imported enum type folders
        for (var _m = __values(typeInfo.importedEnumTypes), _o = _m.next(); !_o.done; _o = _m.next()) {
            var importedEnumType = _o.value;
            importEntries.push({
                type: "Directory",
                name: importedEnumType.type,
                data: templates_1.renderTemplates(templatePath("imported/enum-type"), importedEnumType, subTemplates),
            });
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_o && !_o.done && (_c = _m.return)) _c.call(_m);
        }
        finally { if (e_3) throw e_3.error; }
    }
    try {
        // Generate imported object type folders
        for (var _p = __values(typeInfo.importedObjectTypes), _q = _p.next(); !_q.done; _q = _p.next()) {
            var importedObectType = _q.value;
            importEntries.push({
                type: "Directory",
                name: importedObectType.type,
                data: templates_1.renderTemplates(templatePath("imported/object-type"), importedObectType, subTemplates),
            });
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_q && !_q.done && (_d = _p.return)) _d.call(_p);
        }
        finally { if (e_4) throw e_4.error; }
    }
    if (importEntries.length) {
        output.entries.push({
            type: "Directory",
            name: "imported",
            data: __spread(importEntries, templates_1.renderTemplates(templatePath("imported"), typeInfo, subTemplates)),
        });
    }
    try {
        // Generate interface type folders
        for (var _r = __values(typeInfo.interfaceTypes), _s = _r.next(); !_s.done; _s = _r.next()) {
            var interfaceType = _s.value;
            output.entries.push({
                type: "Directory",
                name: interfaceType.type,
                data: templates_1.renderTemplates(templatePath("interface-type"), interfaceType, subTemplates),
            });
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_s && !_s.done && (_e = _r.return)) _e.call(_r);
        }
        finally { if (e_5) throw e_5.error; }
    }
    // Generate module type folders
    if (typeInfo.moduleType) {
        output.entries.push({
            type: "Directory",
            name: typeInfo.moduleType.type,
            data: templates_1.renderTemplates(templatePath("module-type"), typeInfo.moduleType, subTemplates),
        });
    }
    try {
        // Generate enum type folders
        for (var _t = __values(typeInfo.enumTypes), _u = _t.next(); !_u.done; _u = _t.next()) {
            var enumType = _u.value;
            output.entries.push({
                type: "Directory",
                name: enumType.type,
                data: templates_1.renderTemplates(templatePath("enum-type"), enumType, subTemplates),
            });
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (_u && !_u.done && (_f = _t.return)) _f.call(_t);
        }
        finally { if (e_6) throw e_6.error; }
    }
    // Generate env type folders
    var generateEnvTypeFolder = function (def) {
        def &&
            output.entries.push({
                type: "Directory",
                name: def.type,
                data: templates_1.renderTemplates(templatePath("object-type"), def, subTemplates),
            });
    };
    generateEnvTypeFolder(typeInfo.envType.client);
    generateEnvTypeFolder(typeInfo.envType.sanitized);
    // Generate root entry file
    (_g = output.entries).push.apply(_g, __spread(templates_1.renderTemplates(templatePath(""), typeInfo, subTemplates)));
    return result;
};
function applyTransforms(typeInfo) {
    var e_7, _a;
    var transforms = [
        schema_parse_1.extendType(Functions),
        schema_parse_1.addFirstLast,
        schema_parse_1.toPrefixedGraphQLType,
    ];
    try {
        for (var transforms_1 = __values(transforms), transforms_1_1 = transforms_1.next(); !transforms_1_1.done; transforms_1_1 = transforms_1.next()) {
            var transform = transforms_1_1.value;
            typeInfo = schema_parse_1.transformTypeInfo(typeInfo, transform);
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (transforms_1_1 && !transforms_1_1.done && (_a = transforms_1.return)) _a.call(transforms_1);
        }
        finally { if (e_7) throw e_7.error; }
    }
    return typeInfo;
}
//# sourceMappingURL=index.js.map