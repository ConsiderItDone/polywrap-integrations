import * as Types from "./";
import { Client, InvokeResult } from "@polywrap/core-js";
export declare type UInt = number;
export declare type UInt8 = number;
export declare type UInt16 = number;
export declare type UInt32 = number;
export declare type Int = number;
export declare type Int8 = number;
export declare type Int16 = number;
export declare type Int32 = number;
export declare type Bytes = ArrayBuffer;
export declare type BigInt = string;
export declare type BigNumber = string;
export declare type Json = string;
export declare type String = string;
export declare type Boolean = boolean;
export interface UriResolver_MaybeUriOrManifest {
    uri?: Types.String | null;
    manifest?: Types.String | null;
}
export interface Ethereum_Connection {
    node?: Types.String | null;
    networkNameOrChainId?: Types.String | null;
}
export interface Ethereum_TxOverrides {
    gasLimit?: Types.BigInt | null;
    gasPrice?: Types.BigInt | null;
    value?: Types.BigInt | null;
}
export interface Ethereum_StaticTxResult {
    result: Types.String;
    error: Types.Boolean;
}
export interface Ethereum_TxRequest {
    to?: Types.String | null;
    from?: Types.String | null;
    nonce?: Types.UInt32 | null;
    gasLimit?: Types.BigInt | null;
    gasPrice?: Types.BigInt | null;
    data?: Types.String | null;
    value?: Types.BigInt | null;
    chainId?: Types.BigInt | null;
    type?: Types.UInt32 | null;
}
export interface Ethereum_TxReceipt {
    to: Types.String;
    from: Types.String;
    contractAddress: Types.String;
    transactionIndex: Types.UInt32;
    root?: Types.String | null;
    gasUsed: Types.BigInt;
    logsBloom: Types.String;
    transactionHash: Types.String;
    logs: Array<Types.Ethereum_Log>;
    blockNumber: Types.BigInt;
    blockHash: Types.String;
    confirmations: Types.UInt32;
    cumulativeGasUsed: Types.BigInt;
    effectiveGasPrice: Types.BigInt;
    byzantium: Types.Boolean;
    type: Types.UInt32;
    status?: Types.UInt32 | null;
}
export interface Ethereum_Log {
    blockNumber: Types.BigInt;
    blockHash: Types.String;
    transactionIndex: Types.UInt32;
    removed: Types.Boolean;
    address: Types.String;
    data: Types.String;
    topics: Array<Types.String>;
    transactionHash: Types.String;
    logIndex: Types.UInt32;
}
export interface Ethereum_EventNotification {
    data: Types.String;
    address: Types.String;
    log: Types.Ethereum_Log;
}
export interface Ethereum_Network {
    name: Types.String;
    chainId: Types.BigInt;
    ensAddress?: Types.String | null;
}
export interface Ethereum_TxResponse {
    hash: Types.String;
    to?: Types.String | null;
    from: Types.String;
    nonce: Types.UInt32;
    gasLimit: Types.BigInt;
    gasPrice?: Types.BigInt | null;
    data: Types.String;
    value: Types.BigInt;
    chainId: Types.BigInt;
    blockNumber?: Types.BigInt | null;
    blockHash?: Types.String | null;
    timestamp?: Types.UInt32 | null;
    confirmations: Types.UInt32;
    raw?: Types.String | null;
    r?: Types.String | null;
    s?: Types.String | null;
    v?: Types.UInt32 | null;
    type?: Types.UInt32 | null;
    accessList?: Array<Types.Ethereum_Access> | null;
}
export interface Ethereum_Access {
    address: Types.String;
    storageKeys: Array<Types.String>;
}
interface UriResolver_Module_Input_tryResolveUri extends Record<string, unknown> {
    authority: Types.String;
    path: Types.String;
}
interface UriResolver_Module_Input_getFile extends Record<string, unknown> {
    path: Types.String;
}
export declare const UriResolver_Module: {
    tryResolveUri: (input: UriResolver_Module_Input_tryResolveUri, client: Client) => Promise<InvokeResult<Types.UriResolver_MaybeUriOrManifest | null>>;
    getFile: (input: UriResolver_Module_Input_getFile, client: Client) => Promise<InvokeResult<Types.Bytes | null>>;
};
interface Ethereum_Module_Input_callContractView extends Record<string, unknown> {
    address: Types.String;
    method: Types.String;
    args?: Array<Types.String> | null;
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_callContractStatic extends Record<string, unknown> {
    address: Types.String;
    method: Types.String;
    args?: Array<Types.String> | null;
    connection?: Types.Ethereum_Connection | null;
    txOverrides?: Types.Ethereum_TxOverrides | null;
}
interface Ethereum_Module_Input_getBalance extends Record<string, unknown> {
    address: Types.String;
    blockTag?: Types.BigInt | null;
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_encodeParams extends Record<string, unknown> {
    types: Array<Types.String>;
    values: Array<Types.String>;
}
interface Ethereum_Module_Input_encodeFunction extends Record<string, unknown> {
    method: Types.String;
    args?: Array<Types.String> | null;
}
interface Ethereum_Module_Input_solidityPack extends Record<string, unknown> {
    types: Array<Types.String>;
    values: Array<Types.String>;
}
interface Ethereum_Module_Input_solidityKeccak256 extends Record<string, unknown> {
    types: Array<Types.String>;
    values: Array<Types.String>;
}
interface Ethereum_Module_Input_soliditySha256 extends Record<string, unknown> {
    types: Array<Types.String>;
    values: Array<Types.String>;
}
interface Ethereum_Module_Input_getSignerAddress extends Record<string, unknown> {
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_getSignerBalance extends Record<string, unknown> {
    blockTag?: Types.BigInt | null;
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_getSignerTransactionCount extends Record<string, unknown> {
    blockTag?: Types.BigInt | null;
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_getGasPrice extends Record<string, unknown> {
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_estimateTransactionGas extends Record<string, unknown> {
    tx: Types.Ethereum_TxRequest;
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_estimateContractCallGas extends Record<string, unknown> {
    address: Types.String;
    method: Types.String;
    args?: Array<Types.String> | null;
    connection?: Types.Ethereum_Connection | null;
    txOverrides?: Types.Ethereum_TxOverrides | null;
}
interface Ethereum_Module_Input_checkAddress extends Record<string, unknown> {
    address: Types.String;
}
interface Ethereum_Module_Input_toWei extends Record<string, unknown> {
    eth: Types.String;
}
interface Ethereum_Module_Input_toEth extends Record<string, unknown> {
    wei: Types.BigInt;
}
interface Ethereum_Module_Input_awaitTransaction extends Record<string, unknown> {
    txHash: Types.String;
    confirmations: Types.UInt32;
    timeout: Types.UInt32;
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_waitForEvent extends Record<string, unknown> {
    address: Types.String;
    event: Types.String;
    args?: Array<Types.String> | null;
    timeout?: Types.UInt32 | null;
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_getNetwork extends Record<string, unknown> {
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_callContractMethod extends Record<string, unknown> {
    address: Types.String;
    method: Types.String;
    args?: Array<Types.String> | null;
    connection?: Types.Ethereum_Connection | null;
    txOverrides?: Types.Ethereum_TxOverrides | null;
}
interface Ethereum_Module_Input_callContractMethodAndWait extends Record<string, unknown> {
    address: Types.String;
    method: Types.String;
    args?: Array<Types.String> | null;
    connection?: Types.Ethereum_Connection | null;
    txOverrides?: Types.Ethereum_TxOverrides | null;
}
interface Ethereum_Module_Input_sendTransaction extends Record<string, unknown> {
    tx: Types.Ethereum_TxRequest;
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_sendTransactionAndWait extends Record<string, unknown> {
    tx: Types.Ethereum_TxRequest;
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_deployContract extends Record<string, unknown> {
    abi: Types.String;
    bytecode: Types.String;
    args?: Array<Types.String> | null;
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_signMessage extends Record<string, unknown> {
    message: Types.String;
    connection?: Types.Ethereum_Connection | null;
}
interface Ethereum_Module_Input_sendRPC extends Record<string, unknown> {
    method: Types.String;
    params: Array<Types.String>;
    connection?: Types.Ethereum_Connection | null;
}
export declare const Ethereum_Module: {
    callContractView: (input: Ethereum_Module_Input_callContractView, client: Client) => Promise<InvokeResult<Types.String>>;
    callContractStatic: (input: Ethereum_Module_Input_callContractStatic, client: Client) => Promise<InvokeResult<Types.Ethereum_StaticTxResult>>;
    getBalance: (input: Ethereum_Module_Input_getBalance, client: Client) => Promise<InvokeResult<Types.BigInt>>;
    encodeParams: (input: Ethereum_Module_Input_encodeParams, client: Client) => Promise<InvokeResult<Types.String>>;
    encodeFunction: (input: Ethereum_Module_Input_encodeFunction, client: Client) => Promise<InvokeResult<Types.String>>;
    solidityPack: (input: Ethereum_Module_Input_solidityPack, client: Client) => Promise<InvokeResult<Types.String>>;
    solidityKeccak256: (input: Ethereum_Module_Input_solidityKeccak256, client: Client) => Promise<InvokeResult<Types.String>>;
    soliditySha256: (input: Ethereum_Module_Input_soliditySha256, client: Client) => Promise<InvokeResult<Types.String>>;
    getSignerAddress: (input: Ethereum_Module_Input_getSignerAddress, client: Client) => Promise<InvokeResult<Types.String>>;
    getSignerBalance: (input: Ethereum_Module_Input_getSignerBalance, client: Client) => Promise<InvokeResult<Types.BigInt>>;
    getSignerTransactionCount: (input: Ethereum_Module_Input_getSignerTransactionCount, client: Client) => Promise<InvokeResult<Types.BigInt>>;
    getGasPrice: (input: Ethereum_Module_Input_getGasPrice, client: Client) => Promise<InvokeResult<Types.BigInt>>;
    estimateTransactionGas: (input: Ethereum_Module_Input_estimateTransactionGas, client: Client) => Promise<InvokeResult<Types.BigInt>>;
    estimateContractCallGas: (input: Ethereum_Module_Input_estimateContractCallGas, client: Client) => Promise<InvokeResult<Types.BigInt>>;
    checkAddress: (input: Ethereum_Module_Input_checkAddress, client: Client) => Promise<InvokeResult<Types.Boolean>>;
    toWei: (input: Ethereum_Module_Input_toWei, client: Client) => Promise<InvokeResult<Types.BigInt>>;
    toEth: (input: Ethereum_Module_Input_toEth, client: Client) => Promise<InvokeResult<Types.String>>;
    awaitTransaction: (input: Ethereum_Module_Input_awaitTransaction, client: Client) => Promise<InvokeResult<Types.Ethereum_TxReceipt>>;
    waitForEvent: (input: Ethereum_Module_Input_waitForEvent, client: Client) => Promise<InvokeResult<Types.Ethereum_EventNotification>>;
    getNetwork: (input: Ethereum_Module_Input_getNetwork, client: Client) => Promise<InvokeResult<Types.Ethereum_Network>>;
    callContractMethod: (input: Ethereum_Module_Input_callContractMethod, client: Client) => Promise<InvokeResult<Types.Ethereum_TxResponse>>;
    callContractMethodAndWait: (input: Ethereum_Module_Input_callContractMethodAndWait, client: Client) => Promise<InvokeResult<Types.Ethereum_TxReceipt>>;
    sendTransaction: (input: Ethereum_Module_Input_sendTransaction, client: Client) => Promise<InvokeResult<Types.Ethereum_TxResponse>>;
    sendTransactionAndWait: (input: Ethereum_Module_Input_sendTransactionAndWait, client: Client) => Promise<InvokeResult<Types.Ethereum_TxReceipt>>;
    deployContract: (input: Ethereum_Module_Input_deployContract, client: Client) => Promise<InvokeResult<Types.String>>;
    signMessage: (input: Ethereum_Module_Input_signMessage, client: Client) => Promise<InvokeResult<Types.String>>;
    sendRPC: (input: Ethereum_Module_Input_sendRPC, client: Client) => Promise<InvokeResult<Types.String | null>>;
};
export {};
