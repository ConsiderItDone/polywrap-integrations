import * as Types from "./";
import { Client, InvokeResult } from "@polywrap/core-js";
export declare type UInt = number;
export declare type UInt8 = number;
export declare type UInt16 = number;
export declare type UInt32 = number;
export declare type Int = number;
export declare type Int8 = number;
export declare type Int16 = number;
export declare type Int32 = number;
export declare type Bytes = ArrayBuffer;
export declare type BigInt = string;
export declare type BigNumber = string;
export declare type Json = string;
export declare type String = string;
export declare type Boolean = boolean;
export interface UriResolver_MaybeUriOrManifest {
    uri?: Types.String | null;
    manifest?: Types.String | null;
}
interface UriResolver_Module_Input_tryResolveUri extends Record<string, unknown> {
    authority: Types.String;
    path: Types.String;
}
interface UriResolver_Module_Input_getFile extends Record<string, unknown> {
    path: Types.String;
}
export declare const UriResolver_Module: {
    tryResolveUri: (input: UriResolver_Module_Input_tryResolveUri, client: Client) => Promise<InvokeResult<Types.UriResolver_MaybeUriOrManifest | null>>;
    getFile: (input: UriResolver_Module_Input_getFile, client: Client) => Promise<InvokeResult<Types.Bytes | null>>;
};
export {};
