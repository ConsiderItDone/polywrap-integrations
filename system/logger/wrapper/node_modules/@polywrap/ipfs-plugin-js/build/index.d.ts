/// <reference types="node" />
import { Module, Input_catFile, Input_resolve, Input_tryResolveUri, Input_getFile, Input_addFile, Bytes, Options, ResolveResult, UriResolver_MaybeUriOrManifest } from "./wrap";
import { PluginFactory } from "@polywrap/core-js";
export interface IpfsPluginConfig extends Record<string, unknown> {
    provider: string;
    fallbackProviders?: string[];
}
export declare class IpfsPlugin extends Module<IpfsPluginConfig> {
    private _ipfs;
    constructor(config: IpfsPluginConfig);
    static isCID(cid: string): boolean;
    cat(cid: string, options?: Options): Promise<Buffer>;
    catToString(cid: string, options?: Options): Promise<string>;
    catFile(input: Input_catFile): Promise<Bytes>;
    resolve(input: Input_resolve): Promise<ResolveResult | null>;
    tryResolveUri(input: Input_tryResolveUri): Promise<UriResolver_MaybeUriOrManifest | null>;
    getFile(input: Input_getFile): Promise<Bytes | null>;
    addFile(input: Input_addFile): Promise<string>;
    private _execWithOptions;
}
export declare const ipfsPlugin: PluginFactory<IpfsPluginConfig>;
export declare const plugin: PluginFactory<IpfsPluginConfig>;
