"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildxOutput = exports.directory = exports.schemaFile = exports.polywrapUri = exports.regexString = exports.manifestFile = exports.yamlFile = exports.jsonFile = exports.graphqlFile = exports.websiteUrl = exports.imageFile = exports.appLanguage = exports.pluginLanguage = exports.wasmLanguage = exports.dockerImageId = exports.dockerfileName = exports.dockerImageName = exports.packageTag = exports.packageName = exports.file = void 0;
var types_1 = require("../types");
function file(path) {
    if (typeof path !== "string") {
        return false;
    }
    // eslint-disable-next-line no-useless-escape
    var validPathMatch = path.match(/^((\.\/|..\/)[^\/ ]*)+\/?$/gm);
    var result = false;
    if (validPathMatch && validPathMatch[0]) {
        result = validPathMatch[0].length === path.length;
    }
    return result;
}
exports.file = file;
function packageName(name) {
    return typeof name === "string";
}
exports.packageName = packageName;
function packageTag(tag) {
    return typeof tag === "string";
}
exports.packageTag = packageTag;
function dockerImageName(name) {
    return typeof name === "string";
}
exports.dockerImageName = dockerImageName;
function dockerfileName(value) {
    return (typeof value === "string" && file(value) && value.indexOf("Dockerfile") > -1);
}
exports.dockerfileName = dockerfileName;
function dockerImageId(value) {
    return typeof value === "string" && value.indexOf("sha256:") > -1;
}
exports.dockerImageId = dockerImageId;
function wasmLanguage(language) {
    return (typeof language === "string" &&
        (language === "interface" || language.indexOf("wasm/") > -1));
}
exports.wasmLanguage = wasmLanguage;
function pluginLanguage(language) {
    return typeof language === "string" && language.indexOf("plugin/") > -1;
}
exports.pluginLanguage = pluginLanguage;
function appLanguage(language) {
    return typeof language === "string" && language.indexOf("app/") > -1;
}
exports.appLanguage = appLanguage;
function imageFile(filePath) {
    var _a;
    return (typeof filePath === "string" &&
        file(filePath) &&
        !!((_a = filePath.match(/(\.svg|\.png)$/)) === null || _a === void 0 ? void 0 : _a.length));
}
exports.imageFile = imageFile;
function websiteUrl(url) {
    function validUrl(str) {
        var pattern = new RegExp("^(https?:\\/\\/)?" + // protocol
            "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // domain name
            "((\\d{1,3}\\.){3}\\d{1,3}))" + // OR ip (v4) address
            "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // port and path
            "(\\?[;&a-z\\d%_.~+=-]*)?" + // query string
            "(\\#[-a-z\\d_]*)?$", // fragment locator
        "i");
        return !!pattern.test(str);
    }
    return typeof url === "string" && validUrl(url);
}
exports.websiteUrl = websiteUrl;
function graphqlFile(filePath) {
    var _a;
    return (typeof filePath === "string" &&
        file(filePath) &&
        !!((_a = filePath.match(/(\.graphql)$/)) === null || _a === void 0 ? void 0 : _a.length));
}
exports.graphqlFile = graphqlFile;
function jsonFile(filePath) {
    var _a;
    return (typeof filePath === "string" &&
        file(filePath) &&
        !!((_a = filePath.match(/(\.json)$/)) === null || _a === void 0 ? void 0 : _a.length));
}
exports.jsonFile = jsonFile;
function yamlFile(filePath) {
    var _a;
    return (typeof filePath === "string" &&
        file(filePath) &&
        !!((_a = filePath.match(/(\.yaml)$/)) === null || _a === void 0 ? void 0 : _a.length));
}
exports.yamlFile = yamlFile;
function manifestFile(filePath) {
    return jsonFile(filePath) || yamlFile(filePath);
}
exports.manifestFile = manifestFile;
function regexString(regex) {
    if (typeof regex !== "string") {
        return false;
    }
    var isValid = true;
    try {
        new RegExp(regex);
    }
    catch (e) {
        isValid = false;
    }
    return isValid;
}
exports.regexString = regexString;
function polywrapUri(uri) {
    return typeof uri === "string" && types_1.Uri.isValidUri(uri);
}
exports.polywrapUri = polywrapUri;
function schemaFile(filePath) {
    return typeof filePath === "string" && file(filePath);
}
exports.schemaFile = schemaFile;
function directory(path) {
    if (typeof path === "boolean") {
        return true;
    }
    if (typeof path !== "string") {
        return false;
    }
    var validDirRegex = /^\/?[\w\-/]+$/;
    return !!validDirRegex.test(path);
}
exports.directory = directory;
function buildxOutput(output) {
    if (typeof output === "boolean") {
        return true;
    }
    if (typeof output !== "string") {
        return false;
    }
    switch (output) {
        case "docker":
        case "registry":
            return true;
        default:
            return false;
    }
}
exports.buildxOutput = buildxOutput;
//# sourceMappingURL=validators.js.map