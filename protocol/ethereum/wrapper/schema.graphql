#import { Module } into Provider from "wrap://ens/ethereum-provider.polywrap.eth"

type TxRequest {
    to: String
    from: String
    nonce: UInt32
    gasLimit: BigInt
    gasPrice: BigInt
    data: String
    value: BigInt
    chainId: BigInt
    type: UInt32
}

type Access {
    address: String!
    storageKeys: [String!]!
}

type TxResponse {
    hash: String!
    to: String
    from: String!
    nonce: UInt32!
    gasLimit: BigInt!
    gasPrice: BigInt
    data: String!
    value: BigInt!
    chainId: BigInt!
    blockNumber: BigInt
    blockHash: String
    timestamp: UInt32
    confirmations: UInt32!
    raw: String
    r: String
    s: String
    v: UInt32
    type: UInt32
    accessList: [Access!]
}

type Log {
    blockNumber: BigInt!
    blockHash: String!
    transactionIndex: UInt32!
    removed: Boolean!
    address: String!
    data: String!
    topics: [String!]!
    transactionHash: String!
    logIndex: UInt32!
}

type TxReceipt {
    to: String!
    from: String!
    contractAddress: String!
    transactionIndex: UInt32!
    root: String
    gasUsed: BigInt!
    logsBloom: String!
    transactionHash: String!
    logs: [Log!]!
    blockNumber: BigInt!
    blockHash: String!
    confirmations: UInt32!
    cumulativeGasUsed: BigInt!
    effectiveGasPrice: BigInt!
    byzantium: Boolean!
    type: UInt32!
    status: UInt32
}

type StaticTxResult {
    result: String!
    error: Boolean!
}

type Module {
  getChainId: String!

  callContractView(
    address: String!
    method: String!
    args: [String!]
  ): String!

  callContractStatic(
    address: String!
    method: String!
    args: [String!]
  ): StaticTxResult!

  encodeParams(types: [String!]!, values: [String!]!): String!

  encodeFunction(method: String!, args: [String!]): String!

  getSignerAddress: String!

  getSignerBalance(blockTag: BigInt): BigInt!

  getBalance(address: String!, blockTag: BigInt): BigInt!

  getSignerTransactionCount(
    blockTag: BigInt
  ): BigInt!

  getGasPrice: BigInt!

  estimateTransactionGas(
    tx: Signer_TxRequest!
  ): BigInt!

  estimateContractCallGas(
    address: String!
    method: String!
    args: [String!]
  ): BigInt!

  checkAddress(address: String!): Boolean!

  # toWei(eth: String!): String!

  # toEth(wei: String!): String!

  awaitTransaction(
    txHash: String!
    confirmations: UInt32!
    timeout: UInt32!
  ): TxReceipt!

  # waitForEvent(
  #   address: String!
  #   event: String!
  #   args: [String!]
  #   timeout: UInt32
  #   connection: Signer_Connection
  # ): Signer_EventNotification!

  # getNetwork(connection: Signer_Connection): Signer_Network!

  # deployContract(
  #   abi: String!
  #   bytecode: String!
  #   args: [String!]
  #   connection: Signer_Connection
  # ): Signer_TxReceipt!

  sendTransaction(
    tx: Signer_TxRequest!
    connection: Signer_Connection
  ): Signer_TxResponse!

  sendTransactionAndWait(
    tx: Signer_TxRequest!
    connection: Signer_Connection
  ): Signer_TxReceipt!

  callContractMethod(
    address: String!
    method: String!
    args: [String!]
  ): TxResponse!

  callContractMethodAndWait(
    address: String!
    method: String!
    args: [String!]
  ): TxReceipt!

  signMessage(message: String!): String!

  sendRpc(
    method: String!
    params: [String!]!
  ): String
}
