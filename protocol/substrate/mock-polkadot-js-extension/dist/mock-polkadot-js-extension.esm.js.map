{"version":3,"file":"mock-polkadot-js-extension.esm.js","sources":["../src/singleAccountSigner.ts","../src/index.ts"],"sourcesContent":["// Copyright 2017-2022 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n// This was pulled from https://github.com/polkadot-js/api/blob/79bed8eda39e91e4112f5490b37106ee5353e78b/packages/api/src/test/SingleAccountSigner.ts\n// but unfortunately they do not export it. Replicated here for internal test usage\n\nimport type { Signer, SignerResult } from '@polkadot/api/types';\nimport type { KeyringPair } from '@polkadot/keyring/types';\nimport type { Registry, SignerPayloadJSON, SignerPayloadRaw } from '@polkadot/types/types';\n\nimport { hexToU8a, u8aToHex } from '@polkadot/util';\n\nlet id = 0;\n\nexport class SingleAccountSigner implements Signer {\n  readonly #keyringPair: KeyringPair;\n\n  readonly #registry: Registry;\n\n  readonly #signDelay: number;\n\n  constructor (registry: Registry, keyringPair: KeyringPair, signDelay = 0) {\n    this.#keyringPair = keyringPair;\n    this.#registry = registry;\n    this.#signDelay = signDelay;\n  }\n\n  public async signPayload (payload: SignerPayloadJSON): Promise<SignerResult> {\n    if (payload.address !== this.#keyringPair.address) {\n      throw new Error('Signer does not have the keyringPair');\n    }\n\n    return new Promise((resolve): void => {\n      setTimeout((): void => {\n        const signed = this.#registry.createType('ExtrinsicPayload', payload, { version: payload.version }).sign(this.#keyringPair);\n\n        resolve({\n          id: ++id,\n          ...signed\n        });\n      }, this.#signDelay);\n    });\n  }\n\n  public async signRaw ({ address, data }: SignerPayloadRaw): Promise<SignerResult> {\n    if (address !== this.#keyringPair.address) {\n      throw new Error('Signer does not have the keyringPair');\n    }\n\n    return new Promise((resolve): void => {\n      setTimeout((): void => {\n        const signature = u8aToHex(this.#keyringPair.sign(hexToU8a(data)));\n\n        resolve({\n          id: ++id,\n          signature\n        });\n      }, this.#signDelay);\n    });\n  }\n}\n","import { Injected, InjectedAccount } from '@polkadot/extension-inject/types';\n\nimport { Keyring } from '@polkadot/keyring';\nimport { cryptoWaitReady } from '@polkadot/util-crypto';\nimport { SingleAccountSigner } from './singleAccountSigner';\nimport { TypeRegistry } from '@polkadot/types';\n\n// create a mock polkadot-js extension and inject into the environment\nexport async function enableFn (originName: string): Promise<Injected> {\n\n  await cryptoWaitReady();\n\n  // create a keyring\n  const keyring = new Keyring({ type: 'sr25519' });\n  const alice = keyring.createFromUri('//Alice');\n  const registry = new TypeRegistry();\n  const signer = new SingleAccountSigner(registry, alice);\n\n  // These accounts must be valid sr25519 addresses or they will get filtered out by the web3Accounts function\n  const accounts: InjectedAccount[] = [{ address: alice.address, name: \"alice\", type: 'sr25519' }];\n\n  return {\n    accounts: {\n      get: async () => accounts,\n      subscribe: (cb) => { cb(accounts); return () => {} }\n    },\n    signer\n  }\n}\n"],"names":["id","SingleAccountSigner","registry","keyringPair","signDelay","signPayload","payload","address","Error","Promise","resolve","setTimeout","signed","createType","version","sign","signRaw","data","signature","u8aToHex","hexToU8a","enableFn","originName","cryptoWaitReady","keyring","Keyring","type","alice","createFromUri","TypeRegistry","signer","accounts","name","get","subscribe","cb"],"mappings":"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"}