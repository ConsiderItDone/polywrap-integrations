{"version":3,"file":"mock-polkadot-js-extension.cjs.production.min.js","sources":["../src/singleAccountSigner.ts","../src/index.ts"],"sourcesContent":["// Copyright 2017-2022 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n// This was pulled from https://github.com/polkadot-js/api/blob/79bed8eda39e91e4112f5490b37106ee5353e78b/packages/api/src/test/SingleAccountSigner.ts\n// but unfortunately they do not export it. Replicated here for internal test usage\n\nimport type { Signer, SignerResult } from '@polkadot/api/types';\nimport type { KeyringPair } from '@polkadot/keyring/types';\nimport type { Registry, SignerPayloadJSON, SignerPayloadRaw } from '@polkadot/types/types';\n\nimport { hexToU8a, u8aToHex } from '@polkadot/util';\n\nlet id = 0;\n\nexport class SingleAccountSigner implements Signer {\n  readonly #keyringPair: KeyringPair;\n\n  readonly #registry: Registry;\n\n  readonly #signDelay: number;\n\n  constructor (registry: Registry, keyringPair: KeyringPair, signDelay = 0) {\n    this.#keyringPair = keyringPair;\n    this.#registry = registry;\n    this.#signDelay = signDelay;\n  }\n\n  public async signPayload (payload: SignerPayloadJSON): Promise<SignerResult> {\n    if (payload.address !== this.#keyringPair.address) {\n      throw new Error('Signer does not have the keyringPair');\n    }\n\n    return new Promise((resolve): void => {\n      setTimeout((): void => {\n        const signed = this.#registry.createType('ExtrinsicPayload', payload, { version: payload.version }).sign(this.#keyringPair);\n\n        resolve({\n          id: ++id,\n          ...signed\n        });\n      }, this.#signDelay);\n    });\n  }\n\n  public async signRaw ({ address, data }: SignerPayloadRaw): Promise<SignerResult> {\n    if (address !== this.#keyringPair.address) {\n      throw new Error('Signer does not have the keyringPair');\n    }\n\n    return new Promise((resolve): void => {\n      setTimeout((): void => {\n        const signature = u8aToHex(this.#keyringPair.sign(hexToU8a(data)));\n\n        resolve({\n          id: ++id,\n          signature\n        });\n      }, this.#signDelay);\n    });\n  }\n}\n","import { Injected, InjectedAccount } from '@polkadot/extension-inject/types';\n\nimport { Keyring } from '@polkadot/keyring';\nimport { cryptoWaitReady } from '@polkadot/util-crypto';\nimport { SingleAccountSigner } from './singleAccountSigner';\nimport { TypeRegistry } from '@polkadot/types';\n\n// create a mock polkadot-js extension and inject into the environment\nexport async function enableFn (originName: string): Promise<Injected> {\n\n  await cryptoWaitReady();\n\n  // create a keyring\n  const keyring = new Keyring({ type: 'sr25519' });\n  const alice = keyring.createFromUri('//Alice');\n  const registry = new TypeRegistry();\n  const signer = new SingleAccountSigner(registry, alice);\n\n  // These accounts must be valid sr25519 addresses or they will get filtered out by the web3Accounts function\n  const accounts: InjectedAccount[] = [{ address: alice.address, name: \"alice\", type: 'sr25519' }];\n\n  return {\n    accounts: {\n      get: async () => accounts,\n      subscribe: (cb) => { cb(accounts); return () => {} }\n    },\n    signer\n  }\n}\n"],"names":["id","SingleAccountSigner","registry","keyringPair","signDelay","_classPrivateFieldLooseBase","_proto","signPayload","payload","address","_context","Error","Promise","resolve","setTimeout","signed","createType","version","sign","_this","signRaw","data","_context2","signature","u8aToHex","hexToU8a","_this2","originName","cryptoWaitReady","keyring","Keyring","type","alice","createFromUri","TypeRegistry","signer","accounts","name","get","subscribe","cb"],"mappings":"2tOAYA,IAAIA,EAAK,sDAEIC,aAOX,WAAaC,EAAoBC,EAA0BC,YAAAA,IAAAA,EAAY,8KACrEC,aAAoBF,EACpBE,aAAiBH,EACjBG,aAAkBD,EAVtB,kBAAA,OAAAE,EAaeC,uBAbf,kBAaS,WAAmBC,GAAnB,WAAA,6BAAA,OAAA,sBAAA,OAAA,GACDA,EAAQC,UAAYJ,aAAkBI,SADrCC,SAAA,MAAA,MAEG,IAAIC,MAAM,wCAFb,OAAA,yBAKE,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACT,IAAMC,EAASV,UAAeW,WAAW,mBAAoBR,EAAS,CAAES,QAAST,EAAQS,UAAWC,OAAKC,SAEzGN,KACEb,KAAMA,GACHe,QAEJI,aAbA,OAAA,UAAA,+BAbT,OAAA,YAAA,mCAAAb,EA8Bec,mBA9Bf,kBA8BS,cAAA,aAAA,6BAAA,OAAA,sBAAA,OAAA,GAA0BC,IAAAA,OAATZ,UACNJ,aAAkBI,SAD7Ba,SAAA,MAAA,MAEG,IAAIX,MAAM,wCAFb,OAAA,yBAKE,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACT,IAAMS,EAAYC,WAASnB,UAAkBa,KAAKO,WAASJ,KAE3DR,EAAQ,CACNb,KAAMA,EACNuB,UAAAA,QAEDG,aAbA,OAAA,UAAA,+BA9BT,OAAA,YAAA,0ECNO,WAAyBC,GAAzB,cAAA,6BAAA,OAAA,sBAAA,OAAA,OAAAL,SAECM,oBAFD,OAAA,OAKCC,EAAU,IAAIC,UAAQ,CAAEC,KAAM,YAC9BC,EAAQH,EAAQI,cAAc,WAC9B/B,EAAW,IAAIgC,eACfC,EAAS,IAAIlC,EAAoBC,EAAU8B,GAG3CI,EAA8B,CAAC,CAAE3B,QAASuB,EAAMvB,QAAS4B,KAAM,QAASN,KAAM,8BAE7E,CACLK,SAAU,CACRE,eAAG,kBAAE,aAAA,6BAAA,OAAA,sBAAA,OAAA,yBAAYF,GAAZ,OAAA,UAAA,0BAAF,OAAA,WAAA,mCACHG,UAAW,SAACC,GAAuB,OAAdA,EAAGJ,GAAkB,eAE5CD,OAAAA,IAlBG,OAAA,UAAA,8EAAP"}