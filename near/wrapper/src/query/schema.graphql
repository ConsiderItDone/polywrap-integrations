#import { Query, Transaction, Action, PublicKey, KeyType, FinalExecutionOutcome, FinalExecutionOutcomeWithReceipts } into Near from "w3://ens/nearPlugin.web3api.eth"

type Query {
  requestSignIn(
    contractId: String
    methodNames: [String!]
    successUrl: String
    failureUrl: String
  ): Boolean!

  signOut: Boolean!

  isSignedIn: Boolean!

  getAccountId: String

  """
    RPC Query Functions not part of JsonRpcProvider (Implemented, Tested)
  """
  getAccountState(
    accountId: String!
  ): AccountView!

  findAccessKey(
    accountId: String!
  ): AccessKeyInfo

  getPublicKey(
    accountId: String!
  ): Near_PublicKey

  """
    RPC Query Functions not part of JsonRpcProvider (Not Implemented)
  """

  getAccountBalance(
    accountId: String!
  ): AccountBalance!

  #  getAccountDetails(
  #    accountId: String!
  #  ): [AccountAuthorizedApp]!

  #  getAccessKeys(
  #    accountId: String!
  #  ): [AccessKeyInfo]!

  viewFunction(
    contractId: String!
    methodName: String!
    args: JSON!
  ): JSON!

  """
    Transaction Query Functions (Implemented, Tested)
  """

  # creates a transaction. If signerId is not provided, creates transaction with wallet.
  createTransaction(
    receiverId: String!
    actions: [Near_Action!]!
    signerId: String
  ): Near_Transaction!

  # signs a transaction without wallet
  signTransaction(
    transaction: Near_Transaction!
  ): Near_SignTransactionResult!

  #"""
  #  Utility Functions
  #"""

  # takes amount in Near, returns amount in YoctoNear
  #parseNearAmount(
  #  amount: String!
  #): String!

  # takes amount in YoctoNear, returns amount in Near
  #formatNearAmount(
  #  amount: String! 
  #): String!

  """
    JsonRpcProvider Query Functions (Implemented, Tested)
  """
  getBlock(
    blockQuery: BlockReference!
  ): BlockResult!

  """
    JsonRpcProvider Query Functions (Not Implemented)
  """
  status: NodeStatusResult!

  txStatus(
    txHash: String! #(Bytes | String)! 
    accountId: String!
  ): Near_FinalExecutionOutcome!

  txStatusReceipts(
    txHash: String! #Bytes!
    accountId: String!
  ): Near_FinalExecutionOutcomeWithReceipts!

  blockChanges(
    blockQuery: BlockReference!
  ): BlockChangeResult!

  chunk(
    chunkId: String!  #  (String | [BigInt!])! chunk hash or [blockId, chunkId]
  ): ChunkResult!

  accountChanges(
    accountIdArray: [String!]!
    blockQuery: BlockReference!
  ): ChangeResult!

  gasPrice(
    blockId: BigInt
  ): BigInt!
}

# Based on these types from near-api-js:
# export type Finality = 'optimistic' | 'near-final' | 'final'
# export type BlockReference = { blockId: BlockId } | { finality: Finality } | { sync_checkpoint: 'genesis' | 'earliest_available' }
type BlockReference {
  blockId: String
  finality: String
  syncCheckpoint: String
}

type BlockHeader {
  height: BigInt!
  epoch_id: String!
  next_epoch_id: String!
  hash: String!
  prev_hash: String!
  prev_state_root: String!
  chunk_receipts_root: String!
  chunk_headers_root: String!
  chunk_tx_root: String!
  outcome_root: String!
  chunks_included: BigInt!
  challenges_root: String!
  timestamp: BigInt!
  timestamp_nanosec: String!
  random_value: String!
  validator_proposals: [JSON!]!
  chunk_mask: [Boolean!]!
  gas_price: String!
  rent_paid: String!
  validator_reward: String!
  total_supply: String!
  challenges_result: [JSON!]!
  last_final_block: String!
  last_ds_final_block: String!
  next_bp_hash: String!
  block_merkle_root: String!
  approvals: [String]!
  signature: String!
  latest_protocol_version: BigInt!
}

type Chunk {
  chunk_hash: String!
  prev_block_hash: String!
  outcome_root: String!
  prev_state_root: String!
  encoded_merkle_root: String!
  encoded_length: BigInt!
  height_created: BigInt!
  height_included: BigInt!
  shard_id: BigInt!
  gas_used: BigInt!
  gas_limit: BigInt!
  rent_paid: String!
  validator_reward: String!
  balance_burnt: String!
  outgoing_receipts_root: String!
  tx_root: String!
  validator_proposals: [JSON!]!
  signature: String!
}

type BlockResult {
  author: String!
  header: BlockHeader!
  chunks: [Chunk!]!
}

type ChunkHeader {
  balance_burnt: String!
  chunk_hash: String!
  encoded_length: BigInt!
  encoded_merkle_root: String!
  gas_limit: BigInt!
  gas_used: String!
  height_created: BigInt!
  height_included: BigInt!
  outgoing_receipts_root: String!
  prev_block_hash: String!
  #prev_state_num_parts: BigInt!
  prev_state_root: String!
  rent_paid: String!
  shard_id: BigInt!
  signature: String!
  tx_root: String!
  validator_proposals: [JSON!]!
  validator_reward: String!
}

type ChunkResult {
  header: ChunkHeader!
  receipts: [JSON!]!
  transactions: [Near_Transaction!]!
}

type BlockChange {
  chagneType: String!
  account_id: String!
}

type BlockChangeResult {
  block_hash: String!
  changes: [BlockChange!]!
}

type SyncInfo {
  latest_block_hash: String!
  latest_block_height: BigInt!
  latest_block_time: String!
  latest_state_root: String!
  syncing: Boolean!
}

type Version {
  version: String!
  build: String!
}

type NodeStatusResult {
  chain_id: String!
  rpc_addr: String!
  sync_info: SyncInfo!
  validators: [String!]!
  version: Version!
}

type NearProtocolConfig {
  runtime_config: NearProtocolRuntimeConfig!
}

type NearProtocolRuntimeConfig {
  storage_amount_per_byte: String!
}

# All query responses implement QueryResponseKind
type QueryResponseKind {
  blockHeight: BigInt!
  blockHash: String!
}

type AccountView implements QueryResponseKind {
  amount: String!
  locked: String!
  codeHash: String!
  storageUsage: BigInt!
  storagePaidAt: BigInt!
}

type AccountBalance {
  total: String!
  stateStaked: String!
  staked: String!
  available: String!
}

# type AccountAuthorizedApp {
#   contractId: String!
#   amount: String!
#   publicKey: String!
# }

# Access key permissions determine how an account is allow to interact with a contract
type AccessKeyPermission {
  isFullAccess: Boolean!
  receiverId: String
  methodNames: [String!]
  allowance: BigInt
}

type AccessKey {
  nonce: BigInt!
  permission: AccessKeyPermission!
}

# Access keys contain access key permissions, which determine how an account is allowed to interact with a contract
type AccessKeyInfo {
  publicKey: Near_PublicKey!
  accessKey: AccessKey!
}

type ChangeResult {
  block_hash: String!
  changes: [JSON!]!
}

"""
Common Types
"""

type SignedTransaction {
  transaction: Near_Transaction!
  signature: Near_Signature!
}

# Return value of Mutation.signTransaction(...); contains transaction hash and signed transaction
type SignTransactionResult {
  hash: Bytes!
  signedTx: SignedTransaction!
}

type ExecutionStatus {
  successValue: String
  successReceiptId: String
  failure: Boolean #JSON
}

type ExecutionOutcomeWithId {
  block_hash: String
  id: String!
  outcome: ExecutionOutcome!
  proof: [ExecutionProof!]
}

type ExecutionProof {
  direction: String!
  hash: String!
}

# Execution status of a sent transaction
type ExecutionOutcome {
  executor_id: String
  gas_burnt: BigInt!
  logs: [String!]
  metadata: OutcomeMetaData
  receipt_ids: [String!]!
  status: ExecutionStatus!
  tokens_burnt: String
}

type OutcomeMetaData {
  gas_profile: [GasProfile]!
  version: UInt!
}

type GasProfile {
  cost: String!
  cost_category: String!
  gas_used: String!
}
